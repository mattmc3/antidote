# handle these commands:
# - `git -C "$dir" config remote.origin.url`
# - `git -C "$dir" pull --quiet --ff --rebase --autostash`
# - `git -C "$dir" rev-parse --short HEAD`
# - `git clone --quiet --depth 1 --recurse-submodules --shallow-submodules --branch branch $url $dir`

local args=("$@[@]")
local o_path o_quiet o_ff o_rebase o_autostash o_short
local o_depth o_recurse_submodules o_shallow_submodules o_branch
zparseopts -D -E --      \
  C:=o_path              \
  -short=o_short         \
  -quiet=o_quiet         \
  -ff=o_ff               \
  -rebase=o_rebase       \
  -autostash=o_autostash \
  -recurse-submodules=o_recurse_submodules \
  -shallow-submodules=o_shallow_submodules \
  -depth:=o_depth                          \
  -branch:=o_branch                        ||
  return 1

if [[ "$1" = "clone" ]]; then
  local giturl="$2"
  local bundledir="$3"
  local src="$FAKEZDOTDIR/antidote_home/${bundledir:t}"
  if [[ -d $src ]]; then
    cp -r $src ${bundledir:h}
  elif ! (( $#o_quiet )); then
    echo "FAKEGIT: Cloning into '${url:t}'..."
    echo "FAKEGIT: Repository not found."
    echo "FAKEGIT: repository '$url' not found"
  fi
elif [[ "$@" = "config remote.origin.url" ]]; then
  # un-sanitize dir into URL
  local url=$o_path[-1]
  url=${url:t}
  url=${url:gs/-AT-/\@}
  url=${url:gs/-COLON-/\:}
  url=${url:gs/-SLASH-/\/}
  echo "$url"
elif [[ "$@" = "pull" ]]; then
  (( $#o_quiet )) || echo "FAKEGIT: Already up to date."
elif [[ "$@" = "rev-parse HEAD" ]]; then
  echo "a123456"
else
  echo >&2 "mocking not implemented for git command: git $@"
  return 1
fi

# vim: ft=zsh
