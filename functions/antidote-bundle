### Clone bundle(s) and generate the static load script.
#
# usage: antidote bundle [-h|--help] <bundle>...
#
emulate -L zsh; setopt $_adote_funcopts
local MATCH MBEGIN MEND; local -a match mbegin mend  # appease 'warn_create_global'

local o_help
zparseopts $_adote_zparopt_flags -- h=o_help -help=h || return 1

if (( $#o_help )); then
  antidote-help bundle
  return
fi

# parse the DSL for bundles
local bundles=$(__antidote_parsebundles $@)
bundles=("${(@f)${bundles}}")
(( $#bundles )) || return 1

# loop through the bundles to generate the zsh load script
local bundle bundlestr
local prescript=() script=()
for bundlestr in $bundles; do
  # bundlestr sets an associative array, like so:
  # typeset -A bundle=( [name]=foo/bar [kind]=fpath )
  typeset -A bundle=( $(__antidote_split $'\t' $bundlestr) )

  # nothing to do for clone-only bundles
  [[ $bundle[kind] != clone ]] || continue

  # nothing to do if a conditional annotation fails
  if [[ -v bundle[conditional] ]]; then
    $bundle[conditional] &>/dev/null || continue
  fi

  # special handling for deferred bundles
  if [[ $bundle[kind] = defer ]] && [[ $#prescript -eq 0 ]]; then
    prescript=(
      "if ! (( \$+functions[zsh-defer] )); then"
      "$(antidote-script 'romkatv/zsh-defer' | pr -to 2)"
      "fi"
    )
  fi

  bundle[kind]=${bundle[kind]:-zsh}
  script+="$(antidote-script --kind "$bundle[kind]" --path "$bundle[path]" $bundle[name])"
  [[ $? -eq 0 ]] || return 1
done

# print bundle load script
(( ! $#prescript )) || printf "%s\n" "${prescript[@]}"
printf "%s\n" "${script[@]}"

# vim: ft=zsh
