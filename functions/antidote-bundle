#!/usr/bin/env zsh

### Clone bundle(s) and generate the static load script.
###
### usage: antidote bundle [-h|--help] <bundle>...

emulate -L zsh
setopt local_options extended_glob no_notify no_monitor

local opts
zparseopts -A opts -D -F -- h -help || return 1

if [[ -v opts[-h] ]] || [[ -v opts[--help] ]]; then
  antidote-help bundle
  return
fi

# turn the bundle string into an associative array
local bundle
local bundlestr=$(_antidote_parsebundles $@)
local bundles=("${(@f)${bundlestr}}")
[[ $#bundles -ne 0 ]] || return 1

local giturl parts shortrepo cloning
typeset -a cloning

# loop the first time just to clone missing bundles
for bundlestr in $bundles; do
  # bundlestr sets an associative array, like so:
  # typeset -A bundle=( [kind]=zsh [repo]=foo/bar )
  eval $bundlestr
  if [[ $bundle[repo] = \$* ]] || [[ $bundle[repo] = /* ]]; then
    # path bundles
    continue
  elif [[ $bundle[repo] = */* ]]; then
    # clone the requested repo bundles in the background
    # parse the git URL by converting ':' to '/', splitting on '/', and rejoining the
    # final two elemets
    giturl=${bundle[repo]%.git}
    giturl=${giturl:gs/\:/\/}
    parts=(${(@s:/:)giturl})
    shortrepo=${(j:/:)${parts[-2,-1]}}
    if ! (($cloning[(Ie)$shortrepo])); then
      cloning+=($shortrepo)
      _antidote_clone --background $bundle[repo] $bundle[branch]
    fi
  fi
done

# wait for background cloning to complete
wait

# now loop a second time to generate the bundle load script
local prescript=() script=()
for bundlestr in $bundles; do
  # bundlestr sets an associative array, like so:
  # typeset -A bundle=( [kind]=zsh [repo]=foo/bar )
  eval $bundlestr

  # special handling for deferred bundles
  if [[ $bundle[kind] = defer ]] && [[ $#prescript -eq 0 ]]; then
    _antidote_clone romkatv/zsh-defer
    prescript=(
      "if ! (( \$+functions[zsh-defer] )); then"
      "$(_antidote_script romkatv/zsh-defer | pr -to 2)"
      "fi"
    )
  fi

  # nothing to do for clone-only bundles
  [[ $bundle[kind] != clone ]] || continue

  script+="$(_antidote_script $bundle[repo] $bundle[kind] $bundle[path])"
  [[ $? -eq 0 ]] || return 1
done

# print bundle load script
(( ! $#prescript )) || printf "%s\n" "${prescript[@]}"
printf "%s\n" "${script[@]}"
