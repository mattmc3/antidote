### Clone bundle(s) and generate the static load script.
#
# usage: antidote bundle [-h|--help] <bundle>...
#
emulate -L zsh; setopt $_adote_funcopts
local MATCH MBEGIN MEND; local -a match mbegin mend  # appease 'warn_create_global'

local o_help
zparseopts $_adote_zparopt_flags -- h=o_help -help=h || return 1

if (( $#o_help )); then
  antidote-help bundle
  return
fi

# parse the DSL for bundles
local bundles=$(__antidote_parsebundles $@)
bundles=("${(@f)${bundles}}")
(( $#bundles )) || return 1

# loop through the bundles to generate the zsh load script
local bundlestr opt val
local -a script=() args=()
for bundlestr in $bundles; do
  # bundlestr sets an associative array, like so:
  # typeset -A bundle=( [name]=foo/bar [kind]=fpath )
  typeset -A bundle=( $(__antidote_split $'\t' $bundlestr) )

  # nothing to do for clone-only bundles
  [[ $bundle[kind] != clone ]] || continue

  bundle[kind]=${bundle[kind]:-zsh}
  args=()
  for opt val in "${(@kv)bundle}"; do
    if [[ -z "$val" ]] || [[ "$opt" == name ]]; then
      continue
    fi
    args+=(--${opt} "$val")
  done
  script+="$(antidote-script $args $bundle[name])"
  [[ $? -eq 0 ]] || return 1
done

# special handling for deferred bundles
# filter all but the first if/source block for loading zsh-defer for perf reasons
local -a awk_keep_first_defer=(
  'BEGIN{skip=0;found=0}'
  'skip>0{skip--}'
  '/^if.+functions\[zsh\-defer\]/{ if(!found)found=1; else skip=4 }'
  'skip==0{print}'
)

# print bundle load script
printf "%s\n" "${script[@]}" | awk "$awk_keep_first_defer"

# vim: ft=zsh sw=2 ts=2 et
